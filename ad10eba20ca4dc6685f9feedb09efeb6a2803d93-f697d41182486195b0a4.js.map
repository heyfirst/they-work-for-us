{"version":3,"file":"ad10eba20ca4dc6685f9feedb09efeb6a2803d93-f697d41182486195b0a4.js","mappings":"qMAOA,IAAIA,EAAY,SAACC,EAAOC,GAAR,MAAyB,CACvCC,SAAU,WACVC,MAAO,EACPC,OAAQ,EACRC,UAAW,aACXC,OAAQ,cACRC,OAAQ,4BACRN,YAAAA,EACAO,gBAAiBR,EACjB,UAAW,CACTO,OAAQ,6BAEV,wBAAyB,CACvBE,QAAS,QACTC,OAAQ,MAINC,EAAmB,CACvBF,QAAS,OACTP,SAAU,WACVU,IAAK,MACLC,KAAM,OACNV,MAAO,IACPW,QAAS,EACTC,WAAY,SACZR,OAAQ,OACRS,aAAc,gBACdR,gBAAiB,eAGbS,EAAc,SAACC,EAAOC,EAAMC,GAAd,OAClBC,MAAMC,KAAKC,KAAKL,EAAMM,OAASL,IAC5BM,OACAC,KAAI,SAACC,EAAGC,GAAJ,OAAcA,EAAQT,KAC1BO,KAAI,SAAAG,GAAK,OAAIX,EAAMY,MAAMD,EAAOA,EAAQV,MACxCO,IAAIN,I,8SAoET,IApBe,SAAC,GAAD,IAAGW,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,MAAOC,EAAtC,EAAsCA,IAAtC,OACbC,EAAAA,EAAAA,IAAAA,MAAAA,CACEC,UAAU,SACVF,KAAGG,EAAAA,EAAAA,IAAAA,OAAAA,OAAAA,CACDC,eAAgB,UACbJ,GAFF,aAIHD,MAAOA,GAENH,EAAKL,KAAI,SAACc,EAAOC,GAAR,OAvDC,SAACV,EAAM/B,EAAOC,EAAayC,GACxC,IAAIC,EAAS1B,EAAYc,EAAM,KAAK,SAACa,EAASC,GAAV,OAClCT,EAAAA,EAAAA,IAAAA,MAAAA,CAAKU,IAAKD,EAAIR,UAAU,UACtBH,MAAO,CAAE5B,OAAQyB,EAAK,GAAGgB,KAAKC,WAAa,aAAe,eACzD/B,EAAY2B,EAAS,IAAI,SAACK,EAASC,GAAV,OACxBd,EAAAA,EAAAA,IAAAA,MAAAA,CAAKU,IAAKI,EAAIb,UAAU,WACrBY,EAAQvB,KAAI,gBAAGqB,EAAH,EAAGA,KAAH,OACXX,EAAAA,EAAAA,IAAAA,MAAAA,CAAKU,IAAKC,EAAKI,GAAIhB,IAAKpC,EAAUC,EAAOC,KACvCmC,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,eAAeF,IAAKxB,IACjCyB,EAAAA,EAAAA,IAACgB,EAAAA,GAAD,UACML,EADN,CAEEZ,IAAG,kBAgCnB,OAFIO,GAAeC,EAAOU,MAAKjB,EAAAA,EAAAA,IAAAA,MAAAA,CAAKU,IAAI,OAAOT,UAAU,UAElDM,EAaHW,CACEd,EACAR,EAAOS,GACPR,EAAaQ,GACbA,EAAYV,EAAKP,OAAS","sources":["webpack://they-work-for-us/./src/components/waffle.js"],"sourcesContent":["import React from \"react\"\n\nimport PeopleCard from \"./peopleCard\"\n\nimport \"../styles/global.css\"\nimport \"./waffle.css\"\n\nlet cellStyle = (color, borderColor) => ({\n  position: \"relative\",\n  width: 8,\n  height: 8,\n  boxSizing: \"border-box\",\n  margin: \"0 3px 3px 0\",\n  border: \"1px solid var(--cl-black)\",\n  borderColor,\n  backgroundColor: color,\n  \"&:hover\": {\n    border: \"2px solid var(--cl-black)\",\n  },\n  \"&:hover .tooltip-text\": {\n    display: \"block\",\n    zIndex: 10,\n  },\n})\n\nconst tooltipTextStyle = {\n  display: \"none\",\n  position: \"absolute\",\n  top: \"5px\",\n  left: \"-2px\",\n  width: 350,\n  padding: 0,\n  lineHeight: \"1.8rem\",\n  border: \"none\",\n  borderRadius: \"0 5px 5px 5px\",\n  backgroundColor: \"transparent\",\n}\n\nconst split_array = (array, size, callback) =>\n  Array(Math.ceil(array.length / size))\n    .fill()\n    .map((_, index) => index * size)\n    .map(start => array.slice(start, start + size))\n    .map(callback)\n\nconst waffle = (data, color, borderColor, add_separator) => {\n  let result = split_array(data, 100, (hundred, hi) => (\n    <div key={hi} className=\"hundred\" \n      style={{ margin: data[0].node.is_senator ? '0 10px 0 0' : '0 27px 0 0'}}>\n      {split_array(hundred, 25, (quarter, qi) => (\n        <div key={qi} className=\"quarter\">\n          {quarter.map(({ node }) => (\n            <div key={node.id} css={cellStyle(color, borderColor)}>\n              <div className=\"tooltip-text\" css={tooltipTextStyle}>\n                <PeopleCard\n                  {...node}\n                  css={{\n                    padding: \"1rem 1rem\",\n                    margin: 0,\n                    alignItems: \"center\",\n                    border: \"2px solid var(--cl-black)\",\n                    \".card-info\": {\n                      \".card-name\": {\n                        fontSize: \"1.8rem\",\n                        fontWeight: \"bold\",\n                        fontFamily: \"var(--ff-text)\",\n                      },\n                      \".card-description\": {\n                        fontSize: \"1.6rem\",\n                        fontFamily: \"var(--ff-text)\",\n                      },\n                    },\n                    \".profile-picture\": {\n                      height: \"5rem\",\n                      flexBasis: \"5rem\",\n                    },\n                  }}\n                ></PeopleCard>\n              </div>\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  ))\n\n  if (add_separator) result.push(<div key=\"line\" className=\"line\"></div>)\n\n  return result\n}\n\nconst Waffle = ({ data, colors, borderColors, style, css }) => (\n  <div\n    className=\"waffle\"\n    css={{\n      justifyContent: \"center\",\n      ...css,\n    }}\n    style={style}\n  >\n    {data.map((group, group_idx) =>\n      waffle(\n        group,\n        colors[group_idx],\n        borderColors[group_idx],\n        group_idx < data.length - 1\n      )\n    )}\n  </div>\n)\n\nexport default Waffle\nexport { split_array }\n"],"names":["cellStyle","color","borderColor","position","width","height","boxSizing","margin","border","backgroundColor","display","zIndex","tooltipTextStyle","top","left","padding","lineHeight","borderRadius","split_array","array","size","callback","Array","Math","ceil","length","fill","map","_","index","start","slice","data","colors","borderColors","style","css","___EmotionJSX","className","_css","justifyContent","group","group_idx","add_separator","result","hundred","hi","key","node","is_senator","quarter","qi","id","PeopleCard","push","waffle"],"sourceRoot":""}