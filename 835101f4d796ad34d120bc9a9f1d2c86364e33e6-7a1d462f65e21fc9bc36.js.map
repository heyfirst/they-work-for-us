{"version":3,"file":"835101f4d796ad34d120bc9a9f1d2c86364e33e6-7a1d462f65e21fc9bc36.js","mappings":"mNAkBA,EAbqB,SAAAA,GACnB,IAAMC,EAAQ,CAACD,EAAQE,iBAAkBF,EAAQG,gBAKjD,OAJIF,EAAM,KAAIA,EAAM,IAAKG,EAAAA,EAAAA,IAAWH,EAAM,KACtCA,EAAM,GAAIA,EAAM,IAAKG,EAAAA,EAAAA,IAAWH,EAAM,IACrCA,EAAM,GAAK,OAGdI,EAAAA,EAAAA,IAAAA,IAAAA,KACGJ,EAAM,GADT,MACgBA,EAAM,K,sDCX1B,IAAMK,EAAsB,CAC1BC,QAAS,OACTC,aAAc,OACdC,UAAW,SACXC,WAAY,UAGRC,EAAiB,CACrBC,SAAU,SACVC,WAAY,SACZC,SAAU,SACVC,WAAY,mBAGRC,EAAoB,CACxBT,QAAS,OACTU,OAAQ,8BACRR,UAAW,OACXC,WAAY,OACZQ,SAAU,YAGNC,EAAe,CACnBC,YAAa,4BACbR,SAAU,OACVC,WAAY,SACZC,SAAU,SACV,eAAgB,CACdO,iBAAkB,GAEpB,wBAAyB,CACvBd,QAAS,QACTe,OAAQ,KAINC,EAAmB,CACvBhB,QAAS,OACTK,SAAU,SACVF,WAAY,SACZc,IAAK,OACLN,SAAU,WACVD,OAAQ,kBACRQ,gBAAiB,QACjBC,QAAS,U,qRAmFX,IAhFwB,SAAC,GAAa,IAAXC,EAAW,EAAXA,KACnBC,EAAaD,EAChBE,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SACXC,QAAO,SAACC,EAAKF,GAAN,OAAgBE,EAAMF,IAAO,GAEjCG,EAAgB,SAAAH,GACpB,IAAMI,EAAcJ,EAAQH,EAAc,IAC1C,OAAIQ,KAAKC,MAAMF,KAAgBA,EACtBC,KAAKC,MAAMF,GAAc,IAE3BA,EAAWG,QAAQ,GAAK,KAkBjC,OACEjC,EAAAA,EAAAA,IAAAA,MAAAA,MACEA,EAAAA,EAAAA,IAAAA,MAAAA,CAAKkC,IAAKjC,GACPqB,EAAKE,KAAI,SAAAW,GAAI,OACZnC,EAAAA,EAAAA,IAAAA,MAAAA,CACEoC,IAAKD,EAAKE,KACVH,IAAK5B,EACLgC,MAAO,CAAEC,MAAOV,EAAcM,EAAKT,UAEnC1B,EAAAA,EAAAA,IAAAA,OAAAA,CAAMkC,IAAG,KACTlC,EAAAA,EAAAA,IAAAA,OAAAA,CACEkC,IAAG,GAOFC,EAAKE,YAKdrC,EAAAA,EAAAA,IAAAA,MAAAA,CAAKkC,IAAKvB,GACPW,EAAKE,KAAI,SAAAW,GAAI,OACZnC,EAAAA,EAAAA,IAAAA,MAAAA,CACEoC,IAAKD,EAAKE,KACVG,UAAU,UACVN,IAAKpB,EACLwB,MAAO,CACLlB,gBAAiBe,EAAKM,WACtBF,MAAOV,EAAcM,EAAKT,UAG5B1B,EAAAA,EAAAA,IAAAA,OAAAA,CAAMkC,IAAG,KACTlC,EAAAA,EAAAA,IAAAA,OAAAA,CACEkC,IAAG,EACHI,MAAO,CAAEI,OApDAC,EAoDoBR,EAAKM,WAnDtCG,EAAMD,EACTE,QACC,oCACA,SAACC,EAAGC,EAAGC,EAAGC,GAAV,MAAgB,IAAMF,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,KAE3CC,UAAU,GACVC,MAAM,SACN3B,KAAI,SAAA4B,GAAC,OAAIC,SAASD,EAAG,OAEjB,GAAK,KAAQR,EAAI,GAAK,KAAQA,EAAI,GAAK,KAAQA,EAAI,IAAM,IAAM,GAClE,kBACA,qBA0COf,EAAcM,EAAKT,SAEtB1B,EAAAA,EAAAA,IAAAA,MAAAA,CAAKwC,UAAU,eAAeN,IAAKhB,IACjClB,EAAAA,EAAAA,IAAAA,MAAAA,KAAMmC,EAAKE,OACXrC,EAAAA,EAAAA,IAAAA,MAAAA,KAAM6B,EAAcM,EAAKT,UA1DhB,IAAAiB,EACbC","sources":["webpack://they-work-for-us/./src/components/profile/inOfficeDate.js","webpack://they-work-for-us/./src/components/stackedBarChart.js"],"sourcesContent":["import React from \"react\"\n\nimport { formatDate } from \"../../utils\"\n\n// component to show active date range\nconst InOfficeDate = profile => {\n  const range = [profile.established_date, profile.dissolved_date]\n  if (range[0]) range[0] = formatDate(range[0])\n  if (range[1]) range[1] = formatDate(range[1])\n  else range[1] = \"Now\"\n\n  return (\n    <p>\n      {range[0]} - {range[1]}\n    </p>\n  )\n}\n\nexport default InOfficeDate\n","import React from \"react\"\n\nconst labelContainerStyle = {\n  display: \"flex\",\n  marginBottom: \"0rem\",\n  minHeight: \"2.4rem\",\n  lineHeight: \"2.4rem\",\n}\n\nconst labelCellStyle = {\n  fontSize: \"1.6rem\",\n  whiteSpace: \"nowrap\",\n  overflow: \"hidden\",\n  fontFamily: \"var(--ff-title)\",\n}\n\nconst barContainerStyle = {\n  display: \"flex\",\n  border: \"1.5px solid var(--cl-black)\",\n  minHeight: \"30px\",\n  lineHeight: \"30px\",\n  position: \"relative\",\n}\n\nconst barCellStyle = {\n  borderRight: \"1px solid var(--cl-black)\",\n  fontSize: \"1rem\",\n  whiteSpace: \"nowrap\",\n  overflow: \"hidden\",\n  \"&:last-child\": {\n    borderRightWidth: 0,\n  },\n  \"&:hover .tooltip-text\": {\n    display: \"block\",\n    zIndex: 10,\n  },\n}\n\nconst tooltipTextStyle = {\n  display: \"none\",\n  fontSize: \"1.2rem\",\n  lineHeight: \"1.8rem\",\n  top: \"32px\",\n  position: \"absolute\",\n  border: \"1px solid black\",\n  backgroundColor: \"white\",\n  padding: \"0.5rem\",\n}\n\nconst StackedBarChart = ({ data }) => {\n  const totalValue = data\n    .map(p => p.value)\n    .reduce((acc, value) => acc + value, 0)\n\n  const getPercentage = value => {\n    const percentage = (value / totalValue) * 100\n    if (Math.floor(percentage) === percentage) {\n      return Math.floor(percentage) + \"%\"\n    }\n    return percentage.toFixed(2) + \"%\"\n  }\n\n  const getTextColor = bgHex => {\n    const rgb = bgHex\n      .replace(\n        /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i,\n        (m, r, g, b) => \"#\" + r + r + g + g + b + b\n      )\n      .substring(1)\n      .match(/.{2}/g)\n      .map(x => parseInt(x, 16))\n\n    return 1 - (0.299 * rgb[0] + 0.587 * rgb[1] + 0.114 * rgb[2]) / 255 < 0.5\n      ? \"var(--cl-black)\"\n      : \"var(--cl-white)\"\n  }\n\n  return (\n    <div>\n      <div css={labelContainerStyle}>\n        {data.map(each => (\n          <div\n            key={each.name}\n            css={labelCellStyle}\n            style={{ width: getPercentage(each.value) }}\n          >\n            <span css={{ float: \"left\", height: \"100%\", width: \"1px\" }}></span>\n            <span\n              css={{\n                float: \"left\",\n                fontFamily: \"var(--ff-text)\",\n                fontSize: \"1.2rem\",\n                fontWeight: \"bold\",\n              }}\n            >\n              {each.name}\n            </span>\n          </div>\n        ))}\n      </div>\n      <div css={barContainerStyle}>\n        {data.map(each => (\n          <div\n            key={each.name}\n            className=\"tooltip\"\n            css={barCellStyle}\n            style={{\n              backgroundColor: each.background,\n              width: getPercentage(each.value),\n            }}\n          >\n            <span css={{ float: \"left\", height: \"100%\", width: \"1px\" }}></span>\n            <span\n              css={{ float: \"left\", marginLeft: \"0.25rem\" }}\n              style={{ color: getTextColor(each.background) }}\n            >\n              {getPercentage(each.value)}\n            </span>\n            <div className=\"tooltip-text\" css={tooltipTextStyle}>\n              <div>{each.name}</div>\n              <div>{getPercentage(each.value)}</div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default StackedBarChart\n"],"names":["profile","range","established_date","dissolved_date","formatDate","___EmotionJSX","labelContainerStyle","display","marginBottom","minHeight","lineHeight","labelCellStyle","fontSize","whiteSpace","overflow","fontFamily","barContainerStyle","border","position","barCellStyle","borderRight","borderRightWidth","zIndex","tooltipTextStyle","top","backgroundColor","padding","data","totalValue","map","p","value","reduce","acc","getPercentage","percentage","Math","floor","toFixed","css","each","key","name","style","width","className","background","color","bgHex","rgb","replace","m","r","g","b","substring","match","x","parseInt"],"sourceRoot":""}