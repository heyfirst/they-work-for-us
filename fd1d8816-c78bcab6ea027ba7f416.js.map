{"version":3,"sources":["webpack://they-work-for-us/./src/pages/senate.js"],"names":["cssH1","fontSize","cssSection","paddingTop","paddingBottom","h2","textAlign","cssEngTitle","margin","cssPageP","cssBarChart","props","selectedMembers","senate","data","useState","memberFilter","setMemberFilter","members","e","countMembers","filter","member","tabList","id","label","count","getClass","senator_method","loadCategoryStats","gender","age","education","occupation_group","asset","keyMembers","name","keyPos","nameParts","slug","peopleSlug","lastname","position","fields","showingMembers","a","b","votelogs","joinPeopleVotelog","pageStyles","background","title","className","css","style","dangerouslySetInnerHTML","__html","formatOrdinalNumber","x","key","media","marginTop","marginBottom","fontFamily","fontWeight","voteLog","isCompact","tab","role","onClick","type"],"mappings":"yRAqBO,IA6GDA,EAAQ,CACZC,SAAU,QAGNC,EAAa,CACjBC,WADiB,OAEjBC,cAFiB,OAGjBC,GAAI,CACFJ,SADE,SAEFK,UAAW,WAITC,EAAc,CAClBN,SADkB,SAElBK,UAFkB,OAGlBE,OAAQ,qBAGJC,EAAN,GAEMC,EAAc,CAClBF,OAAQ,U,koBA4RV,UAzRmB,SAAAG,GAAS,MAmBpBC,EAlBN,EAA4BD,EAA5B,KAAQE,EAAR,SAAmBC,GAAnB,qBAEA,GAAwCC,cAAxC,IAAOC,EAAP,KAAqBC,EAArB,KACOC,GAAWH,cAASD,EAAA,yBAA6B,SAAAK,GAAC,OAAIA,EAAJ,SAAzD,GAGMC,EAAe,SAAAC,GAOnB,OALsBH,EAAA,QACpB,SAAAI,GAAM,OACHD,EAAD,gBACAC,mBAA0BD,EAFtB,kBAIR,QAmBIE,EAAU,CACd,CACEC,GADF,UAEEC,MAFF,UAGEC,MAAON,EAHT,IAIEC,OAJF,GAKEM,SAAU,SAAAX,GAAY,OAAMA,EAAD,eAAL,GAAK,WAE7B,CACEQ,GADF,aAEEC,MAFF,aAGEC,MAAON,EAAa,CAAEQ,eAAgB,eACtCP,OAAQ,CAAEO,eAAgB,cAC1BD,SAAU,SAAAX,GAAY,MACpBA,yCADoB,KAGxB,CACEQ,GADF,cAEEC,MAFF,QAGEC,MAAON,EAAa,CAAEQ,eAAgB,gBACtCP,OAAQ,CAAEO,eAAgB,eAC1BD,SAAU,SAAAX,GAAY,MACpBA,0CADoB,KAGxB,CACEQ,GADF,gBAEEC,MAFF,gBAGEC,MAAON,EAAa,CAAEQ,eAAgB,kBACtCP,OAAQ,CAAEO,eAAgB,iBAC1BD,SAAU,SAAAX,GAAY,MACpBA,4CADoB,MAK1B,GAA4Da,QAA5D,GAAQC,EAAR,SAAgBC,EAAhB,MAAqBC,EAArB,YAAgCC,EAAhC,mBAAkDC,EAAlD,QAIMC,EAAa,IACjB,CACE,CACEC,KADF,UAEEX,MAAO,aAET,CACEW,KADF,uBAEEX,MAAO,wBAET,CACEW,KADF,wBAEEX,MAAO,yBAXX,KAaM,cACJ,IAAKZ,EAAOwB,EAAZ,MAA0B,OAAO,KACjC,IAAMC,EAAYzB,EAAOwB,EAAPxB,uBAAlB,GACM0B,GAAOC,QAAWF,OAAxB,MAIA,MAAO,CAAEd,GAAF,EAAMY,KAHAE,EAAb,GAGmBG,SAFFH,gBAAjB,KAE6BI,SADZL,EAAjB,MACuCM,OAAQ,CAAEJ,aAI/CK,IA7EAhC,EAAkBM,EAAA,QACpB,SAAAI,GAAM,OACHN,EAAD,gBACAM,mBAA0BN,EAFtB,mBAKRJ,MAAqB,qBACnBiC,SAAWC,EAAXD,KACIA,yBAAyBC,EAAzBD,SADJA,MAEIA,qBAAqBC,EAArBD,KAHe,SAKrB,GAoEIE,GAAWC,QACflC,EADgC,cAEhCA,EAFgC,kBAGhCA,EAHF,gBAMA,OACE,aAAQmC,WAAY,CAAEC,WAAY,aAChC,aAAKC,MAAM,mBACX,mBAASC,UAAU,YACjB,eAAKA,UAAU,SACb,eAAKA,UAAU,kBACb,cAAIC,KAAG,4BAAc7C,OAAQ,eAAtB,cACJK,EADH,gBACwBA,EAF1B,gBAIE,cAAIyC,MAAK,sBACP,gBACEC,wBAAyB,CACvBC,QAAQC,QAAoB5C,EAAD,kBAHjC,IAJF,WAYE,cAAIyC,MAAK,qBAZX,UAaE,aAAGD,KAAG,0CAAoBxC,EAb5B,cAcE,cAAIwC,KAAG,0CAdT,kBAeE,YAfF,IAgBE,cAAIA,KAAG,0CAhBT,cAiBE,YAjBF,IAkBE,cAAIC,MAAK,qBAlBX,eAmBGnB,EAAA,KAAe,SAAAuB,GACd,OACE,eAAKN,UAAL,aAA4BO,IAAKD,EAAElC,KACjC,qBAAgBmC,IAAKD,EAAElC,IAF3B,UAOJ,eAAK4B,UAAU,SACb,cACEE,MAAK,4BAEFM,OAFE,MAEW,CACZC,UADY,QAEZC,aAAc,QAJb,KAFT,YAYE,cACER,MAAK,oBAEHS,WAFG,iBAGHC,WAAY,YAJhB,sBAOsBlD,gBAPtB,WAZF,QAqBE,eAAKuC,IAAG,IACN,eAAKC,MAAK,sBACR,aAAiBxC,KAAMgB,MAEzB,eAAKwB,MAAK,sBACR,aAAiBxC,KAAMiB,MAEzB,eAAKuB,MAAK,sBACR,aAAiBxC,KAAMkB,MAEzB,eAAKsB,MAAK,sBACR,aAAiBxC,KAAMmB,MAEzB,eAAKqB,MAAK,sBACR,aAAiBxC,KAAMoB,SAOhCa,EAAA,UACC,mBAASM,KAAG,4BAAmBH,WAAY,oBAA/B,eACV,eAAKE,UAAU,cACb,cAAIC,KAAG,0CADT,6BAEE,eACEA,IAAG,GAQFN,EAAA,KAAa,gBAAGvB,EAAH,KAAOmB,EAAP,SAAkBsB,GAAlB,iCACZ,qBACEC,WADF,EAEEP,IAFF,EAGEN,KAAG,gGAIHd,KAAMI,EAAOJ,MARH,UAtFxB,MAuGE,mBAASc,KAAG,4BAAmBH,WAAY,YAA/B,eACV,eAAKE,UAAU,cACb,cACEC,IAAG,GAFP,kBAUE,cACEA,IAAG,GAgBF9B,EAAA,KAAY,SAAA4C,GAAG,OACd,cACER,IAAKQ,EADP,GAEEf,UAAW,CAACe,WAAD,SAFb,KAGEC,KAHF,MAIEC,SA5OahD,EA4Oe8C,EAAD,OA5OJ,kBAAMlD,EAAN,MA8OtBkD,EANH,WAMgBA,EANhB,MADc,KAvOC,IAAA9C,MAkPlBuB,EAAA,UACC,eACES,IAAG,GAMFT,EAAA,KAAmB,qBAClB,qBACEe,IAAKrC,EAAOE,IADd,GAGE8C,KAAK,kBAKX,eACEjB,IAAG,GAjKf","file":"fd1d8816-c78bcab6ea027ba7f416.js","sourcesContent":["import React, { useState } from \"react\"\nimport { graphql } from \"gatsby\"\nimport _ from \"lodash\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport {\n  loadCategoryStats,\n  joinPeopleVotelog,\n  peopleSlug,\n  formatOrdinalNumber,\n} from \"../utils\"\nimport StackedBarChart from \"../components/stackedBarChart\"\nimport { OfficialWebsite, InOfficeDate } from \"../components/profile\"\nimport PeopleCardMini from \"../components/peopleCardMini\"\nimport PeopleCard from \"../components/peopleCard\"\nimport VoteLogCard from \"../components/voteLogCard\"\nimport { media } from \"../styles\"\n\nimport \"../styles/profile-book.css\"\n\nexport const query = graphql`\n  query {\n    senate: partyYaml(party_type: { eq: \"สว\" }, is_active: { eq: true }) {\n      name\n      party_ordinal\n      description\n      established_date\n      dissolved_date\n      speaker\n      first_deputy_speaker\n      second_deputy_speaker\n      website\n      facebook\n      twitter\n      is_active\n    }\n    allPeopleYaml(\n      filter: { is_senator: { eq: true }, is_active: { eq: true } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          title\n          name\n          lastname\n          senator_method\n        }\n      }\n    }\n    gender: allPeopleYaml(\n      filter: { is_senator: { eq: true }, is_active: { eq: true } }\n    ) {\n      group(field: gender) {\n        value: totalCount\n        name: fieldValue\n      }\n    }\n    education: allPeopleYaml(\n      filter: { is_senator: { eq: true }, is_active: { eq: true } }\n    ) {\n      group(field: education) {\n        value: totalCount\n        name: fieldValue\n      }\n    }\n    occupation_group: allPeopleYaml(\n      filter: { is_senator: { eq: true }, is_active: { eq: true } }\n    ) {\n      group(field: occupation_group) {\n        value: totalCount\n        name: fieldValue\n      }\n    }\n    age: allPeopleYaml(\n      filter: { is_senator: { eq: true }, is_active: { eq: true } }\n    ) {\n      edges {\n        node {\n          birthdate\n        }\n      }\n    }\n    asset: allPeopleYaml(\n      filter: { is_senator: { eq: true }, is_active: { eq: true } }\n    ) {\n      edges {\n        node {\n          asset\n        }\n      }\n    }\n    allVotelogYaml(\n      filter: { is_active: { eq: true } }\n      sort: { fields: vote_date, order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          title\n          description_th\n          passed\n          is_no_vote\n          no_vote_description\n          vote_date\n        }\n      }\n    }\n    allPeopleVoteYaml {\n      edges {\n        node {\n          id\n          votelog {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`\n\nconst cssH1 = {\n  fontSize: \"4rem\",\n}\n\nconst cssSection = {\n  paddingTop: \"3rem\",\n  paddingBottom: \"8rem\",\n  h2: {\n    fontSize: \"4.8rem\",\n    textAlign: \"center\",\n  },\n}\n\nconst cssEngTitle = {\n  fontSize: \"2.4rem\",\n  textAlign: \"left\",\n  margin: \"1.5rem 0 1.2rem 0\",\n}\n\nconst cssPageP = {}\n\nconst cssBarChart = {\n  margin: \"1rem 0\",\n}\n\nconst SenatePage = props => {\n  const { senate, ...data } = props.data\n\n  const [memberFilter, setMemberFilter] = useState({})\n  const [members] = useState(data.allPeopleYaml.edges.map(e => e.node))\n  const selectMemberFilter = filter => () => setMemberFilter(filter)\n\n  const countMembers = filter => {\n    // filter member by senator_method\n    let selectedMembers = members.filter(\n      member =>\n        !filter.senator_method ||\n        member.senator_method === filter.senator_method\n    )\n    return selectedMembers.length\n  }\n\n  const getSortedMembers = () => {\n    // filter member by senator_method\n    let selectedMembers = members.filter(\n      member =>\n        !memberFilter.senator_method ||\n        member.senator_method === memberFilter.senator_method\n    )\n    // sort by name and lastname\n    selectedMembers.sort((a, b) =>\n      a.name === b.name\n        ? a.lastname.localeCompare(b.lastname, \"th\")\n        : a.name.localeCompare(b.name, \"th\")\n    )\n    return selectedMembers\n  }\n\n  const tabList = [\n    {\n      id: \"ทั้งหมด\",\n      label: \"ทั้งหมด\",\n      count: countMembers({}),\n      filter: {},\n      getClass: memberFilter => (!memberFilter.senator_method ? \"active\" : \"\"),\n    },\n    {\n      id: \"โดยตำแหน่ง\",\n      label: \"โดยตำแหน่ง\",\n      count: countMembers({ senator_method: \"โดยตำแหน่ง\" }),\n      filter: { senator_method: \"โดยตำแหน่ง\" },\n      getClass: memberFilter =>\n        memberFilter.senator_method === \"โดยตำแหน่ง\" ? \"active\" : \"\",\n    },\n    {\n      id: \"เลือกกันเอง\",\n      label: \"สรรหา\",\n      count: countMembers({ senator_method: \"เลือกกันเอง\" }),\n      filter: { senator_method: \"เลือกกันเอง\" },\n      getClass: memberFilter =>\n        memberFilter.senator_method === \"เลือกกันเอง\" ? \"active\" : \"\",\n    },\n    {\n      id: \"เลือกโดย คสช.\",\n      label: \"เลือกโดย คสช.\",\n      count: countMembers({ senator_method: \"เลือกโดย คสช.\" }),\n      filter: { senator_method: \"เลือกโดย คสช.\" },\n      getClass: memberFilter =>\n        memberFilter.senator_method === \"เลือกโดย คสช.\" ? \"active\" : \"\",\n    },\n  ]\n\n  const { gender, age, education, occupation_group, asset } = loadCategoryStats(\n    data\n  )\n\n  const keyMembers = _.compact(\n    [\n      {\n        name: \"speaker\",\n        label: \"ประธานสภา\",\n      },\n      {\n        name: \"first_deputy_speaker\",\n        label: \"รองประธานสภา คนที่ 1\",\n      },\n      {\n        name: \"second_deputy_speaker\",\n        label: \"รองประธานสภา คนที่ 2\",\n      },\n    ].map((keyPos, id) => {\n      if (!senate[keyPos.name]) return null\n      const nameParts = senate[keyPos.name].split(\" \").slice(1)\n      const slug = peopleSlug(nameParts.join(\" \"))\n      const name = nameParts[0]\n      const lastname = nameParts.slice(1).join(\" \")\n      const position = keyPos.label\n      return { id, name, lastname, position, fields: { slug } }\n    })\n  )\n\n  const showingMembers = getSortedMembers()\n\n  const votelogs = joinPeopleVotelog(\n    data.allPeopleYaml,\n    data.allPeopleVoteYaml,\n    data.allVotelogYaml\n  )\n\n  return (\n    <Layout pageStyles={{ background: \"#edf087\" }}>\n      <SEO title=\"สมาชิกวุฒิสภา\" />\n      <section className=\"section\">\n        <div className=\"book\">\n          <div className=\"page leftPage\">\n            <h1 css={{ ...cssH1, margin: \"1rem 0 0 0\" }}>\n              {senate.name} ชุดที่ {senate.party_ordinal}\n            </h1>\n            <h2 style={{ ...cssEngTitle }}>\n              <span\n                dangerouslySetInnerHTML={{\n                  __html: formatOrdinalNumber(senate.party_ordinal),\n                }}\n              />{\" \"}\n              Senate\n            </h2>\n            <h2 style={{ ...cssEngTitle }}>About</h2>\n            <p css={{ ...cssPageP }}>{senate.description}</p>\n            <h2 css={{ ...cssEngTitle }}>Official Link</h2>\n            <OfficialWebsite {...senate}></OfficialWebsite>\n            <h2 css={{ ...cssEngTitle }}>In Office</h2>\n            <InOfficeDate {...senate}></InOfficeDate>\n            <h2 style={{ ...cssEngTitle }}>Key Members</h2>\n            {keyMembers.map(x => {\n              return (\n                <div className=\"peopleCard\" key={x.id}>\n                  <PeopleCardMini key={x.id} {...x} />\n                </div>\n              )\n            })}\n          </div>\n          <div className=\"page\">\n            <h2\n              style={{\n                ...cssEngTitle,\n                [media(767)]: {\n                  marginTop: \"11rem\",\n                  marginBottom: \"0rem\",\n                },\n              }}\n            >\n              Members\n            </h2>\n            <h2\n              style={{\n                ...cssEngTitle,\n                fontFamily: \"var(--ff-text)\",\n                fontWeight: \"normal\",\n              }}\n            >\n              สมาชิกวุฒิสภาจำนวน {data.allPeopleYaml.totalCount} คน\n            </h2>\n            <div css={{ width: \"100%\" }}>\n              <div style={{ ...cssBarChart }}>\n                <StackedBarChart data={gender}></StackedBarChart>\n              </div>\n              <div style={{ ...cssBarChart }}>\n                <StackedBarChart data={age}></StackedBarChart>\n              </div>\n              <div style={{ ...cssBarChart }}>\n                <StackedBarChart data={education}></StackedBarChart>\n              </div>\n              <div style={{ ...cssBarChart }}>\n                <StackedBarChart data={occupation_group}></StackedBarChart>\n              </div>\n              <div style={{ ...cssBarChart }}>\n                <StackedBarChart data={asset}></StackedBarChart>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {votelogs.length > 0 ? (\n        <section css={{ ...cssSection, background: \"var(--cl-white)\" }}>\n          <div className=\"container\">\n            <h2 css={{ ...cssH1 }}>การลงมติล่าสุดของวุฒิสภา</h2>\n            <div\n              css={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"flex-start\",\n                flexWrap: \"wrap\",\n                marginTop: \"6rem\",\n              }}\n            >\n              {votelogs.map(({ id, fields, ...voteLog }) => (\n                <VoteLogCard\n                  isCompact\n                  key={id}\n                  css={{\n                    width: `calc((var(--container-width) - 4rem) / 2)`,\n                    margin: \"0 1rem 2rem 1rem\",\n                  }}\n                  slug={fields.slug}\n                  {...voteLog}\n                />\n              ))}\n            </div>\n          </div>\n        </section>\n      ) : null}\n\n      <section css={{ ...cssSection, background: \"#eeeeee\" }}>\n        <div className=\"container\">\n          <h2\n            css={{\n              fontSize: \"4.8rem\",\n              textAlign: \"center\",\n              paddingTop: \"6rem\",\n            }}\n          >\n            สมาชิกทั้งหมด\n          </h2>\n          <ul\n            css={{\n              display: \"block\",\n              listStyle: \"none\",\n              textAlign: \"center\",\n              \"> li\": {\n                display: \"inline-block\",\n                fontSize: \"2.4rem\",\n                padding: \"1rem 0 0\",\n                margin: \"0 1rem\",\n                cursor: \"pointer\",\n                \"&.active\": {\n                  borderBottom: \"8px solid var(--cl-black)\",\n                },\n              },\n            }}\n          >\n            {tabList.map(tab => (\n              <li\n                key={tab.id}\n                className={[tab.getClass(memberFilter)].join(\" \")}\n                role=\"tab\"\n                onClick={selectMemberFilter(tab.filter)}\n              >\n                {tab.label} ({tab.count})\n              </li>\n            ))}\n          </ul>\n          {showingMembers.length > 0 ? (\n            <div\n              css={{\n                display: \"flex\",\n                flexWrap: \"wrap\",\n                justifyContent: \"space-evenly\",\n              }}\n            >\n              {showingMembers.map((member, index) => (\n                <PeopleCard\n                  key={member.id}\n                  {...member}\n                  type=\"senator\"\n                ></PeopleCard>\n              ))}\n            </div>\n          ) : (\n            <div\n              css={{\n                fontFamily: \"var(--ff-title)\",\n                fontSize: \"3.2rem\",\n                textAlign: \"center\",\n                margin: \"6rem 0\",\n              }}\n            >\n              ไม่มีสมาชิก\n            </div>\n          )}\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nexport default SenatePage\n"],"sourceRoot":""}